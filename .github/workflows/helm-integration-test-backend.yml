name: Helm Integration Test Reusable (backend)

on:
  workflow_call:
    inputs:
      component:
        required: true
        type: string
      target:
        required: true
        type: string

jobs:
  helm-integration-test-latest:
    if: inputs.target == 'latest'
    runs-on: ubuntu-latest
    steps:
      # mono occupies port 8084 which conflicts with mgmt-backend
      - name: Stop mono service
        run: |
          sudo kill -9 `sudo lsof -t -i:8084`
          sudo lsof -i -P -n | grep LISTEN

      - name: Free disk space
        run: |
          mkdir /tmp/test
          df --human-readable
          sudo apt clean
          docker rmi $(docker image ls --all --quiet)
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df --human-readable

      - name: Start Minikube
        run: minikube start --cpus 2 --memory 6096

      - name: Checkout repo (model)
        uses: actions/checkout@v3
        with:
          repository: instill-ai/model

      - name: Load .env file
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v${{ env.K6_VERSION }}/k6-v${{ env.K6_VERSION }}-linux-amd64.tar.gz -L | tar xvz --strip-components 1 && sudo cp k6 /usr/bin

      - name: Checkout repo (base)
        uses: actions/checkout@v3
        with:
          repository: instill-ai/base

      - name: Load .env file (base)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      - name: Launch Helm Instill Base (latest)
        run: |
          helm install base charts/base --namespace instill-ai --create-namespace \
            --set edition=k8s-ce:test \
            --set apiGatewayBase.image.tag=latest \
            --set mgmtBackend.image.tag=latest \
            --set console.image.tag=latest \
            --set tags.observability=false

      - name: Wait for base pods up
        run: |
          while [[ $(kubectl get pods --namespace instill-ai -l "app.kubernetes.io/component=api-gateway-base,app.kubernetes.io/instance=base" -o 'jsonpath={..status.phase}') != *"Running"* ]]; do
            echo "$(kubectl get pods --namespace instill-ai)"
            sleep 10
          done

      - name: Checkout repo (model)
        uses: actions/checkout@v3
        with:
          repository: instill-ai/model

      - name: Load .env file (model)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      - name: Launch Helm Instill Model (latest)
        run: |
          helm install model charts/model --namespace instill-ai --create-namespace \
            --set itMode.enabled=true \
            --set edition=k8s-ce:test \
            --set apiGatewayModel.image.tag=latest \
            --set modelBackend.image.tag=latest \
            --set controllerModel.image.tag=latest \
            --set triton.nvidiaVisibleDevices=${NVIDIA_VISIBLE_DEVICES} \
            --set tags.observability=false

      - name: Wait for model pods up
        run: |
          while [[ $(kubectl get pods --namespace instill-ai -l "app.kubernetes.io/component=api-gateway-model,app.kubernetes.io/instance=model" -o 'jsonpath={..status.phase}') != *"Running"* ]]; do
            echo "$(kubectl get pods --namespace instill-ai)"
            sleep 10
          done

      - name: Port-forward of model-api-gateway
        run: |
          API_GATEWAY_MODEL_POD_NAME=$(kubectl get pods --namespace instill-ai -l "app.kubernetes.io/component=api-gateway-model,app.kubernetes.io/instance=model" -o json | jq -r '.items[0].metadata.name')
          kubectl --namespace instill-ai port-forward ${API_GATEWAY_MODEL_POD_NAME} ${API_GATEWAY_MODEL_PORT}:${API_GATEWAY_MODEL_PORT} > /dev/null 2>&1 &
          while ! nc -vz localhost ${API_GATEWAY_MODEL_PORT} > /dev/null 2>&1; do sleep 1; done

      - name: Run ${{ inputs.component }} integration test (latest)
        if: inputs.target == 'latest'
        run: |
          git clone https://github.com/instill-ai/${{ inputs.component }}.git
          cd ${{ inputs.component }}
          make integration-test API_GATEWAY_MODEL_HOST=localhost API_GATEWAY_MODEL_PORT=${API_GATEWAY_MODEL_PORT}

  helm-integration-test-release:
    if: inputs.target == 'release'
    runs-on: ubuntu-latest
    steps:
      # mono occupies port 8084 which conflicts with mgmt-backend
      - name: Stop mono service
        run: |
          sudo kill -9 `sudo lsof -t -i:8084`
          sudo lsof -i -P -n | grep LISTEN

      - name: Free disk space
        run: |
          mkdir /tmp/test
          df --human-readable
          sudo apt clean
          docker rmi $(docker image ls --all --quiet)
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df --human-readable

      - name: Start Minikube
        run: minikube start --cpus 2 --memory 6096

      - name: Checkout repo (model)
        uses: actions/checkout@v3
        with:
          repository: instill-ai/model

      - name: Load .env file
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v${{ env.K6_VERSION }}/k6-v${{ env.K6_VERSION }}-linux-amd64.tar.gz -L | tar xvz --strip-components 1 && sudo cp k6 /usr/bin

      - name: Checkout repo (base)
        uses: actions/checkout@v3
        with:
          repository: instill-ai/base

      - name: Load .env file (base)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      - name: Launch Helm Instill Base (release)
        run: |
          helm install base charts/base --namespace instill-ai --create-namespace \
            --set edition=k8s-ce:test \
            --set apiGatewayBase.image.tag=${API_GATEWAY_VERSION} \
            --set mgmtBackend.image.tag=${MGMT_BACKEND_VERSION} \
            --set console.image.tag=${CONSOLE_VERSION} \
            --set tags.observability=false

      - name: Wait for base pods up
        run: |
          while [[ $(kubectl get pods --namespace instill-ai -l "app.kubernetes.io/component=api-gateway-base,app.kubernetes.io/instance=base" -o 'jsonpath={..status.phase}') != *"Running"* ]]; do
            echo "$(kubectl get pods --namespace instill-ai)"
            sleep 10
          done

      - name: Checkout repo (model)
        uses: actions/checkout@v3
        with:
          repository: instill-ai/model

      - name: Load .env file (model)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      - name: Uppercase component name
        id: uppercase
        run: |
          echo "COMPONENT_NAME=$(echo ${{ inputs.component }} | tr 'a-z-' 'A-Z_')" >> $GITHUB_OUTPUT

      - name: Launch Instill Model (release)
        run: |
          helm install model charts/model --namespace instill-ai --create-namespace \
            --set itMode.enabled=true \
            --set edition=k8s-ce:test \
            --set apiGatewayModel.image.tag=${API_GATEWAY_VERSION} \
            --set modelBackend.image.tag=${MODEL_BACKEND_VERSION} \
            --set controllerModel.image.tag=latest \
            --set triton.nvidiaVisibleDevices=${NVIDIA_VISIBLE_DEVICES} \
            --set tags.observability=false

      - name: Wait for model pods up
        run: |
          while [[ $(kubectl get pods --namespace instill-ai -l "app.kubernetes.io/component=api-gateway-model,app.kubernetes.io/instance=model" -o 'jsonpath={..status.phase}') != *"Running"* ]]; do
            echo "$(kubectl get pods --namespace instill-ai)"
            sleep 10
          done

      - name: Port-forward of model-api-gateway
        run: |
          API_GATEWAY_MODEL_POD_NAME=$(kubectl get pods --namespace instill-ai -l "app.kubernetes.io/component=api-gateway-model,app.kubernetes.io/instance=model" -o json | jq -r '.items[0].metadata.name')
          kubectl --namespace instill-ai port-forward ${API_GATEWAY_MODEL_POD_NAME} ${API_GATEWAY_MODEL_PORT}:${API_GATEWAY_MODEL_PORT} > /dev/null 2>&1 &
          while ! nc -vz localhost ${API_GATEWAY_MODEL_PORT} > /dev/null 2>&1; do sleep 1; done

      - name: Run ${{ inputs.component }} integration test (release)
        env:
          COMPONENT_VERSION: ${{ env[format('{0}_VERSION', steps.uppercase.outputs.COMPONENT_NAME)] }}
        run: |
          git clone -b v$COMPONENT_VERSION https://github.com/instill-ai/${{ inputs.component }}.git
          cd ${{ inputs.component }}
          make integration-test API_GATEWAY_MODEL_HOST=localhost API_GATEWAY_MODEL_PORT=${API_GATEWAY_MODEL_PORT}
