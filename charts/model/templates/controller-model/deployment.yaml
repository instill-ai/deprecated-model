apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "model.controllerModel" . }}
  labels:
    {{- include "model.labels" . | nindent 4 }}
    app.kubernetes.io/component: controller-model
  annotations:
    rollme: {{ randAlphaNum 5 | quote }}
spec:
  strategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if eq .Values.updateStrategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.updateStrategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.updateStrategy.rollingUpdate.maxUnavailable }}
    {{- else}}
    rollingUpdate: null
    {{- end }}
  {{- if not .Values.controllerModel.autoscaling.enabled }}
  replicas: {{ .Values.controllerModel.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "model.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: controller-model
  template:
    metadata:
      labels:
        {{- include "model.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: controller-model
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/controller-model/configmap.yaml") . | sha256sum }}
        {{- with .Values.controllerModel.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      # Ubuntu nobody:nogroup is 65534:65534
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
      {{- if .Values.controllerModel.serviceAccountName }}
      serviceAccountName: {{ .Values.controllerModel.serviceAccountName }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.controllerModel.automountServiceAccountToken | default false }}
      terminationGracePeriodSeconds: 120
      initContainers:
        - name: wait-for-dependencies
          image: curlimages/curl:8.00.1
          command: ['sh', '-c']
          args:
          - >
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${ETCD_HOST}:${ETCD_CLIENT_PORT}/health)" != "200" ]]; do echo waiting for etcd; sleep 1; done &&
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${MODEL_BACKEND_HOST}:${MODEL_BACKEND_PORT}/v1alpha/health/model)" != "200" ]]; do echo waiting for model-backend; sleep 1; done
          env:
            - name: MODEL_BACKEND_HOST
              value: "{{ template "model.modelBackend" . }}"
            - name: MODEL_BACKEND_PORT
              value: "{{ template "model.modelBackend.publicPort" . }}"
            - name: ETCD_HOST
              value: "{{ template "core.etcd" . }}"
            - name: ETCD_CLIENT_PORT
              value: "{{ template "core.etcd.clientPort" . }}"
      containers:
        - name: controller-model
          image: {{ .Values.controllerModel.image.repository }}:{{ .Values.controllerModel.image.tag }}
          imagePullPolicy: {{ .Values.controllerModel.image.pullPolicy }}
          readinessProbe:
            httpGet:
              path: /v1alpha/__readiness
              scheme: {{ ternary "https" "http" .Values.internalTLS.enabled | upper }}
              port: {{ ternary "https" "http" .Values.internalTLS.enabled }}-private
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /v1alpha/__liveness
              scheme: {{ ternary "https" "http" .Values.internalTLS.enabled | upper }}
              port: {{ ternary "https" "http" .Values.internalTLS.enabled }}-private
            initialDelaySeconds: 5
            periodSeconds: 10
          {{- if .Values.controllerModel.resources }}
          resources:
            {{- toYaml .Values.controllerModel.resources | nindent 12 }}
          {{- end }}
          command: [./{{ .Values.controllerModel.commandName.main }}]
          ports:
            - name: {{ ternary "https" "http" .Values.internalTLS.enabled }}-private
              containerPort: {{ template "model.controllerModel.privatePort" . }}
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: {{ .Values.controllerModel.configPath }}
              subPath: config.yaml
            {{- if .Values.internalTLS.enabled }}
            - name: controller-internal-certs
              mountPath: "/etc/instill-ai/model/ssl/controller"
            {{- end }}
            {{- with .Values.controllerModel.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.controllerModel.extraEnv }}
          env:
            {{- toYaml .Values.controllerModel.extraEnv | nindent 12 }}
          {{- end }}
        {{- with .Values.controllerModel.sidecarContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "model.controllerModel" . }}
        - name: controller-internal-certs
          secret:
            secretName: {{ template "model.internalTLS.controllerModel.secretName" . }}
        {{- with .Values.controllerModel.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.controllerModel.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controllerModel.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controllerModel.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
