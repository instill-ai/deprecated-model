{{- $modelRepository := .Values.persistence.persistentVolumeClaim.modelRepository -}}
{{- $condaPack := .Values.persistence.persistentVolumeClaim.condaPack -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "model.triton" . }}
  labels:
    {{- include "model.labels" . | nindent 4 }}
    app.kubernetes.io/component: triton-inference-server
spec:
  strategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if eq .Values.updateStrategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.updateStrategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.updateStrategy.rollingUpdate.maxUnavailable }}
    {{- else}}
    rollingUpdate: null
    {{- end }}
  {{- if not .Values.triton.autoscaling.enabled }}
  replicas: {{ .Values.triton.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "model.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: triton-inference-server
  template:
    metadata:
      labels:
        {{- include "model.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: triton-inference-server
      annotations:
        {{- with .Values.triton.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      {{- if .Values.triton.serviceAccountName }}
      serviceAccountName: {{ .Values.triton.serviceAccountName }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.triton.automountServiceAccountToken | default false }}
      terminationGracePeriodSeconds: 120
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: triton-conda-env
          securityContext:
            runAsUser: 0
          image: {{ .Values.triton.condaEnv.image.repository }}:{{ .Values.triton.condaEnv.image.tag }}-{{ ternary "gpu" "cpu" .Values.triton.gpu.enabled }}
          imagePullPolicy: {{ .Values.triton.condaEnv.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - cp -r /conda-pack/* /shared-volume && chown -R 1000:1000 /shared-volume
          volumeMounts:
            - name: conda-pack
              mountPath: /shared-volume
        {{- with .Values.triton.extraInitContainers }}
        {{- toYaml . | indent 8 }}
        {{- end }}
      containers:
        - name: triton-inference-server
          image: {{ .Values.triton.image.repository }}:{{ .Values.triton.image.tag }}
          imagePullPolicy: {{ .Values.triton.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /v2/health/live
              scheme: {{ ternary "https" "http" .Values.internalTLS.enabled | upper }}
              port: {{ ternary "https" "http" .Values.internalTLS.enabled }}
            initialDelaySeconds: 5
            failureThreshold: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /v2/health/ready
              scheme: {{ ternary "https" "http" .Values.internalTLS.enabled | upper }}
              port: {{ ternary "https" "http" .Values.internalTLS.enabled }}
            initialDelaySeconds: 5
            failureThreshold: 3
            periodSeconds: 5
          {{- if .Values.triton.gpu.enabled }}
          resources:
            limits:
              nvidia.com/gpu: {{ .Values.triton.gpu.num }}
          {{- end }}
          command: ["/bin/bash", "-c"]
          args:
            - tritonserver --model-store=/model-repository --model-control-mode=explicit --allow-http=true
          ports:
            - name: {{ ternary "https" "http" .Values.internalTLS.enabled }}
              containerPort: {{ template "model.triton.httpPort" . }}
              protocol: TCP
            - name: grpc
              containerPort: {{ template "model.triton.grpcPort" . }}
              protocol: TCP
            - name: metrics
              containerPort: {{ template "model.triton.metricsPort" . }}
              protocol: TCP
          volumeMounts:
            - mountPath: /dev/shm
              name: shm-volume
            - name: conda-pack
              mountPath: /conda-pack
            - name: model-repository
              mountPath: /model-repository
          env:
            - name: NVIDIA_VISIBLE_DEVICES
              value: "{{ .Values.triton.nvidiaVisibleDevices }}"
            {{- if .Values.triton.extraEnv }}
            {{- toYaml .Values.triton.extraEnv | nindent 12 }}
            {{- end }}
        {{- with $.Values.triton.sidecarContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: shm-volume
          emptyDir:
            medium: Memory
            sizeLimit: {{ .Values.triton.shmSizeLimit }}
        - name: conda-pack
        {{- if not .Values.persistence.enabled }}
          emptyDir: {}
        {{- else if $condaPack.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ $condaPack.existingClaim }}
        {{- else }}
          persistentVolumeClaim:
            claimName: conda-pack-data-volume
        {{- end }}
        - name: model-repository
        {{- if not .Values.persistence.enabled }}
          emptyDir: {}
        {{- else if $modelRepository.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ $modelRepository.existingClaim }}
        {{- else }}
          persistentVolumeClaim:
            claimName: model-repository-data-volume
        {{- end }}
      {{- with .Values.modelBackend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.triton.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.modelBackend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
