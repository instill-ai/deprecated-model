## -- Provide a name in place of vdp
nameOverride: ""
## -- Override the deployment namespace
namespaceOverride: ""
## -- Provide a name to substitute for the full names of resources
fullnameOverride: ""
# -- The update strategy for deployments with persistent volumes: "RollingUpdate" or "Recreate"
# Set it as "Recreate" when "RWM" for volumes isn't supported
updateStrategy:
  type: RollingUpdate
# -- Logging level: debug, info, warning, error or fatal
logLevel: info
# -- Enable development mode
# if edition is "k8s-ce:dev", console will be launched with CODE_ENV=development. Otherwise, CODE_ENV=production
edition: k8s-ce
# -- The maximum data payload to VDP cluster (MB)
maxDataSizeMB: 12
# -- Set true to enable integration test mode
# The model-backend will use dummy models
# The mgmt-backend will set a mock up customer_id
itMode:
  enabled: false
# -- Use this set to assign a list of default pullSecrets
imagePullSecrets:
expose:
  # -- Set how to expose the api-gateway-model service. Set the type as "ingress", "clusterIP", "nodePort" or "loadBalancer"
  # and fill the information in the corresponding section
  type: clusterIP
  tls:
    # Enable TLS or not.
    enabled: true
    # The source of the tls certificate. Set as "auto", "secret"
    # or "none" and fill the information in the corresponding section
    # 1) auto: generate the tls certificate automatically
    # 2) secret: read the tls certificate from the specified secret.
    # The tls certificate can be generated manually or by cert manager
    # 3) none: configure no tls certificate for the ingress. If the default
    # tls certificate is configured in the ingress controller, choose this option
    certSource: auto
    auto:
      # The common name used to generate the certificate, it's necessary
      # when the type isn't "ingress"
      commonName: ""
    secret:
      # The name of secret which contains keys named:
      # "tls.crt" - the certificate
      # "tls.key" - the private key
      secretName: ""
  ingress:
    hosts:
      apiGatewayModel: model.instill.tech
    # set to the type of ingress controller if it has specific requirements.
    # leave as `default` for most ingress controllers.
    # set to `gce` if using the GCE ingress controller
    controller: default
    ## Allow .Capabilities.KubeVersion.Version to be overridden while creating ingress
    kubeVersionOverride: ""
    className: ""
    # Annotations on the Ingress
    annotations: {}
  clusterIP:
    ports:
      # The service port api-gateway-model http listens on
      apiGatewayModelHttp:
      # The service port api-gateway-model stats listens on
      apiGatewayModelStats:
      # The service port api-gateway-model metrics listens on
      apiGatewayModelMetrics:
    # Annotations on the ClusterIP service
    annotations: {}
  nodePort:
    ports:
      apiGatewayModelHttp:
        # The service port api-gateway-model http listens on
        port:
        # The node port api-gateway-model listens on
        nodePort: 30010
      apiGatewayModelStats:
        # The service port api-gateway-model stats listens
        port:
        # The node port api-gateway-model stats listens on
        nodePort: 30011
      apiGatewayModelMetrics:
        # The service port api-gateway-model metrics listens on
        port:
        # The node port api-gateway-model metrics listens on
        nodePort: 30012
    # Annotations on the NodePort service
    annotations: {}
  loadBalancer:
    # Set the IP if the LoadBalancer supports assigning IP
    IP: ""
    sourceRanges: []
    ports:
      # The service port api-gateway-model http listens on
      apiGatewayModelHttp:
      # The service port api-gateway-model stats listens on
      apiGatewayModelStats:
      # The service port api-gateway-model metrics listens on
      apiGatewayModelMetrics:
    # Annotations on the LoadBalancer service
    annotations: {}
# -- The internal TLS used for VDP components secure communicating. In order to enable https
# in each components tls cert files need to provided in advance.
internalTLS:
  # If internal TLS enabled
  enabled: false
  # There are three ways to provide tls
  # 1) "auto" will generate cert automatically
  # 2) "manual" need provide cert file manually in following value
  # 3) "secret" internal certificates from secret
  certSource: "auto"
  # The content of trust ca, only available when `certSource` is "manual"
  trustCa: ""
  # api-gateway-model related cert configuration
  apiGatewayModel:
    # secret name for api-gateway-model's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of api-gateway-model's TLS cert file, only available when `certSource` is "manual"
    crt: ""
    # Content of api-gateway-model's TLS key file, only available when `certSource` is "manual"
    key: ""
  # model-backend related cert configuration
  modelBackend:
    # secret name for model-backend's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of model-backend's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of model-backend's TLS key file, only available when `certSource` is "manual"
    key: ""
  # controller-model related cert configuration
  controllerModel:
    # secret name for controller-model's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of controller-model's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of controller-model's TLS key file, only available when `certSource` is "manual"
    key: ""
  # triton related cert configuration
  triton:
    # secret name for triton's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of triton's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of triton's TLS key file, only available when `certSource` is "manual"
    key: ""
# -- The persistence is enabled by default and a default StorageClass
# is needed in the k8s cluster to provision volumes dynamically.
# Specify another StorageClass in the "storageClass" or set "existingClaim"
# if you already have existing persistent volumes to use
persistence:
  enabled: true
  # Setting it to "keep" to avoid removing PVCs during a helm delete
  # operation. Leaving it empty will delete PVCs after the chart deleted
  # (this does not apply for PVCs that are created for internal database
  # and redis components, i.e. they are never deleted automatically)
  resourcePolicy: "keep"
  persistentVolumeClaim:
    modelRepository:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 50Gi
      annotations: {}
    condaPack:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 10Gi
      annotations: {}
# -- The usage collector configuration
usage:
  enabled: true
  tlsenabled: true
  host: usage.instill.tech
  port: 443
apiGatewayModel:
  # -- The image of api-gateway
  image:
    repository: instill/api-gateway
    tag: 0.3.2-alpha
    pullPolicy: IfNotPresent
  # -- The path of configuration file for api-gateway
  configPath: /api-gateway/config/.env
  # -- The TLS configuration for api-gateway-model
  tls:
    enabled: false
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for api-gateway
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volume
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
modelBackend:
  # -- The image of model-backend
  image:
    repository: instill/model-backend
    tag: 0.16.11-alpha
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    migration: model-backend-migrate
    init: model-backend-init
    worker: model-backend-worker
    main: model-backend
    initModel: model-backend-init-model
  # -- The path of configuration file for model-backend
  configPath: /model-backend/config/config.yaml
  # -- The database migration version
  dbVersion: 1
  # -- The configuration of Temporal Cloud
  temporal:
    hostPort:
    namespace:
    ca:
    cert:
    key:
    serverName:
    workflow:
      maxWorkflowTimeout: 3600 # in seconds
      maxWorkflowRetry: 3
      maxActivityRetry: 1
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for model-backend
  replicaCount: 1
  # -- The model initialization configuration
  initModel:
    enabled: false
    path: https://raw.githubusercontent.com/instill-ai/vdp/main/model-hub/model_hub_cpu.json
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
controllerModel:
  # -- The image of controller
  image:
    repository: instill/controller-model
    tag: 0.2.1-alpha
    pullPolicy: IfNotPresent
  # -- The command names to be executed
  commandName:
    main: controller-model
  # -- The path of configuration file for mgmt-backend
  configPath: /controller-model/config/config.yaml
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for controller
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  loopinterval: 3
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
triton:
  # -- The image of Triton
  image:
    repository: instill/tritonserver
    tag: 23.04
    pullPolicy: IfNotPresent
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for Triton
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  nvidiaVisibleDevices: all
  condaEnv:
    image:
      repository: instill/triton-conda-env
      tag: 0.3.1-alpha
      pullPolicy: IfNotPresent
  shmSizeLimit: 2Gi
  gpu:
    enabled: false
    num:
database:
  # -- The host of database
  host:
  # -- The port of database
  port:
  # -- The user name
  username:
  # -- The user password
  password:
  # -- The maximum number of connections in the idle connection pool per pod.
  # If it <=0, no idle connections are retained.
  maxIdleConns: 5
  # -- The maximum number of open connections to the database per pod.
  # If it <= 0, then there is no limit on the number of open connections.
  maxOpenConns: 10
  # -- The maximum amount of time in minutes a connection may be reused.
  # Expired connections may be closed lazily before reuse.
  # If it <= 0, connections are not closed due to a connection's age.
  maxConnLifeTime: 30m
etcd:
  persistence:
    enabled: false
  auth:
    rbac:
      create: false
  autoCompactionMode: revision
  autoCompactionRetention: 1
redis:
  addr:
temporal:
  admintools:
    # -- Enable Temporal admin-tools
    enabled: true
    # -- The image of Temporal admin-tools
    image:
      repository: temporalio/admin-tools
      tag: 1.19.1
      pullPolicy: IfNotPresent
    # -- Set the service account to be used, default if left empty
    serviceAccountName: ""
    # -- Mount the service account token
    automountServiceAccountToken: false
    # -- The number of replica for temporal admin-tools
    replicaCount: 1
    # -- The pod resource
    resources: {}
    ## -- The priority class to run the pod as
    priorityClassName:
    # -- Additional deployment annotations
    podAnnotations: {}
    # -- Additional service annotations
    serviceAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
tags:
  observability: true
