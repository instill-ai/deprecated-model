## -- Provide a name in place of vdp
nameOverride: ""
## -- Override the deployment namespace
namespaceOverride: ""
## -- Provide a name to substitute for the full names of resources
fullnameOverride: ""
# -- The update strategy for deployments with persistent volumes: "RollingUpdate" or "Recreate"
# Set it as "Recreate" when "RWM" for volumes isn't supported
updateStrategy:
  type: RollingUpdate
# -- Logging level: debug, info, warning, error or fatal
logLevel: info
# -- Enable development mode
# if edition is "k8s-ce:dev", console will be launched with CODE_ENV=development. Otherwise, CODE_ENV=production
edition: k8s-ce
# -- The maximum data payload to VDP cluster (MB)
maxDataSizeMB: 12
# -- Set true to enable integration test mode
# The model-backend will use dummy models
# The mgmt-backend will set a mock up customer_id
itMode:
  enabled: false
# -- Use this set to assign a list of default pullSecrets
imagePullSecrets:
# -- The internal TLS used for VDP components secure communicating. In order to enable https
# in each components tls cert files need to provided in advance.
internalTLS:
  # If internal TLS enabled
  enabled: false
  # There are three ways to provide tls
  # 1) "auto" will generate cert automatically
  # 2) "manual" need provide cert file manually in following value
  # 3) "secret" internal certificates from secret
  certSource: "auto"
  # The content of trust ca, only available when `certSource` is "manual"
  trustCa: ""
  # model-backend related cert configuration
  modelBackend:
    # secret name for model-backend's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of model-backend's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of model-backend's TLS key file, only available when `certSource` is "manual"
    key: ""
  # controller-model related cert configuration
  controllerModel:
    # secret name for controller-model's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of controller-model's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of controller-model's TLS key file, only available when `certSource` is "manual"
    key: ""
  # triton related cert configuration
  triton:
    # secret name for triton's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of triton's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of triton's TLS key file, only available when `certSource` is "manual"
    key: ""
  ray:
    # secret name for ray's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of ray's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of ray's TLS key file, only available when `certSource` is "manual"
    key: ""
# -- The persistence is enabled by default and a default StorageClass
# is needed in the k8s cluster to provision volumes dynamically.
# Specify another StorageClass in the "storageClass" or set "existingClaim"
# if you already have existing persistent volumes to use
persistence:
  enabled: true
  # Setting it to "keep" to avoid removing PVCs during a helm delete
  # operation. Leaving it empty will delete PVCs after the chart deleted
  # (this does not apply for PVCs that are created for internal database
  # and redis components, i.e. they are never deleted automatically)
  resourcePolicy: "keep"
  persistentVolumeClaim:
    modelRepository:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 150Gi
      annotations: {}
    condaPack:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 10Gi
      annotations: {}
# -- The usage collector configuration
usage:
  enabled: true
  tlsenabled: true
  host: usage.instill.tech
  port: 443
modelBackend:
  # -- The image of model-backend
  image:
    repository: instill/model-backend
    tag: 0.18.0-alpha
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    migration: model-backend-migrate
    init: model-backend-init
    worker: model-backend-worker
    main: model-backend
    initModel: model-backend-init-model
  # -- The path of configuration file for model-backend
  configPath: /model-backend/config/config.yaml
  # -- The database migration version
  dbVersion: 2
  # -- The configuration of Temporal Cloud
  temporal:
    hostPort:
    namespace:
    ca:
    cert:
    key:
    serverName:
    workflow:
      maxWorkflowTimeout: 3600 # in seconds
      maxWorkflowRetry: 3
      maxActivityRetry: 1
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for model-backend
  replicaCount: 1
  # -- The model initialization configuration
  initModel:
    enabled: false
    path: https://raw.githubusercontent.com/instill-ai/model/main/model-hub/model_hub_cpu.json
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
controllerModel:
  # -- The image of controller
  image:
    repository: instill/controller-model
    tag: 0.2.5-alpha
    pullPolicy: IfNotPresent
  # -- The command names to be executed
  commandName:
    main: controller-model
  # -- The path of configuration file for mgmt-backend
  configPath: /controller-model/config/config.yaml
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for controller
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  loopinterval: 3
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
triton:
  # -- The image of Triton
  image:
    repository: instill/tritonserver
    tag: 23.04-vllm
    pullPolicy: IfNotPresent
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for Triton
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  nvidiaVisibleDevices: all
  condaEnv:
    image:
      repository: instill/triton-conda-env
      tag: 0.4.0-alpha
      pullPolicy: IfNotPresent
  shmSizeLimit: 2Gi
  gpu:
    enabled: false
    num:
ray:
  # -- The image of Ray
  image:
    repository: instill/rayserver
    tag: latest
    pullPolicy: IfNotPresent
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for Ray
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  nvidiaVisibleDevices: all
  shmSizeLimit: 4Gi
  gpu:
    enabled: false
    num:
  platform: cpu
database:
  # -- The host of database
  host:
  # -- The port of database
  port:
  # -- The user name
  username:
  # -- The user password
  password:
  # -- The maximum number of connections in the idle connection pool per pod.
  # If it <=0, no idle connections are retained.
  maxIdleConns: 5
  # -- The maximum number of open connections to the database per pod.
  # If it <= 0, then there is no limit on the number of open connections.
  maxOpenConns: 10
  # -- The maximum amount of time in minutes a connection may be reused.
  # Expired connections may be closed lazily before reuse.
  # If it <= 0, connections are not closed due to a connection's age.
  maxConnLifeTime: 30m
etcd:
  persistence:
    enabled: false
  auth:
    rbac:
      create: false
  autoCompactionMode: revision
  autoCompactionRetention: 1
redis:
  addr:
temporal:
  admintools:
    # -- Enable Temporal admin-tools
    enabled: true
    # -- The image of Temporal admin-tools
    image:
      repository: temporalio/admin-tools
      tag: 1.19.1
      pullPolicy: IfNotPresent
    # -- Set the service account to be used, default if left empty
    serviceAccountName: ""
    # -- Mount the service account token
    automountServiceAccountToken: false
    # -- The number of replica for temporal admin-tools
    replicaCount: 1
    # -- The pod resource
    resources: {}
    ## -- The priority class to run the pod as
    priorityClassName:
    # -- Additional deployment annotations
    podAnnotations: {}
    # -- Additional service annotations
    serviceAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
tags:
  observability: true
