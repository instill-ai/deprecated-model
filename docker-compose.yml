version: "3.9"

networks:
  default:
    name: instill-network
    external: true

volumes:
  conda_pack:
    name: conda-pack
  model_repository:
    name: model-repository
  model_cache:
    name: model-cache

services:
  model_backend_migrate:
    container_name: ${MODEL_BACKEND_HOST}-migrate
    image: ${MODEL_BACKEND_IMAGE}:${MODEL_BACKEND_VERSION}
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./model-backend-migrate

  model_backend_init:
    container_name: ${MODEL_BACKEND_HOST}-init
    image: ${MODEL_BACKEND_IMAGE}:${MODEL_BACKEND_VERSION}
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./model-backend-init
    depends_on:
      - model_backend_migrate

  model_backend_worker:
    container_name: ${MODEL_BACKEND_HOST}-worker
    image: ${MODEL_BACKEND_IMAGE}:${MODEL_BACKEND_VERSION}
    restart: unless-stopped
    environment:
      CFG_SERVER_DEBUG: "false"
      CFG_SERVER_ITMODE_ENABLED: ${ITMODE_ENABLED}
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: ${TEMPORAL_HOST}:${TEMPORAL_PORT}
      CFG_CACHE_REDIS_REDISOPTIONS_ADDR: ${REDIS_HOST}:${REDIS_PORT}
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    volumes:
      - model_repository:/model-repository
      - model_cache:/.cache
    entrypoint: ./model-backend-worker
    depends_on:
      model_backend_init:
        condition: service_completed_successfully
      temporal_admin_tools_model:
        condition: service_completed_successfully

  model_backend:
    container_name: ${MODEL_BACKEND_HOST}
    image: ${MODEL_BACKEND_IMAGE}:${MODEL_BACKEND_VERSION}
    restart: unless-stopped
    environment:
      CFG_SERVER_PRIVATEPORT: ${MODEL_BACKEND_PRIVATEPORT}
      CFG_SERVER_PUBLICPORT: ${MODEL_BACKEND_PUBLICPORT}
      CFG_SERVER_DEBUG: "false"
      CFG_SERVER_MAXDATASIZE: ${MAX_DATA_SIZE}
      CFG_SERVER_ITMODE_ENABLED: ${ITMODE_ENABLED}
      CFG_SERVER_USAGE_ENABLED: ${USAGE_ENABLED}
      CFG_SERVER_EDITION: ${EDITION}
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_MGMTBACKEND_HOST: ${MGMT_BACKEND_HOST}
      CFG_MGMTBACKEND_PRIVATEPORT: ${MGMT_BACKEND_PRIVATEPORT}
      CFG_TRITONSERVER_GRPCURI: ${TRITON_SERVER_HOST}:${TRITON_SERVER_PORT}
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: ${TEMPORAL_HOST}:${TEMPORAL_PORT}
      CFG_CACHE_REDIS_REDISOPTIONS_ADDR: ${REDIS_HOST}:${REDIS_PORT}
      CFG_TRITONSERVER_MODELSTORE: /model-repository
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    volumes:
      - model_repository:/model-repository
      - model_cache:/.cache
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://${MODEL_BACKEND_HOST}:${MODEL_BACKEND_PUBLICPORT}/v1alpha/ready/model",
        ]
      timeout: 20s
      retries: 10
    entrypoint: ./model-backend
    depends_on:
      - triton_server
      - ray_server
      - model_backend_worker

  model_backend_init_model:
    container_name: ${MODEL_BACKEND_HOST}-init-model
    image: ${MODEL_BACKEND_IMAGE}:${MODEL_BACKEND_VERSION}
    restart: on-failure
    environment:
      MODEL_BACKEND_HOST: ${MODEL_BACKEND_HOST}
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./model-backend-init-model
    depends_on:
      model_backend:
        condition: service_healthy

  controller_model:
    container_name: ${CONTROLLER_MODEL_HOST}
    image: ${CONTROLLER_MODEL_IMAGE}:${CONTROLLER_MODEL_VERSION}
    restart: unless-stopped
    environment:
      CFG_SERVER_DEBUG: "false"
      CFG_SERVER_EDITION: ${EDITION}
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_ETCD_HOST: ${ETCD_HOST}
      CFG_ETCD_PORT: ${ETCD_CLIENT_PORT}
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./controller-model

  triton_conda_env:
    container_name: triton-conda-env
    image: instill/triton-conda-env:${TRITON_CONDA_ENV_VERSION}-${TRITON_CONDA_ENV_PLATFORM}
    volumes:
      - conda_pack:/conda-pack

  triton_server:
    container_name: ${TRITON_SERVER_HOST}
    image: ${TRITON_SERVER_IMAGE}:${TRITON_SERVER_VERSION}
    restart: unless-stopped
    command: tritonserver --model-store=/model-repository --model-control-mode=explicit --allow-http=true
    volumes:
      - model_repository:/model-repository
      - conda_pack:/conda-pack
    healthcheck:
      test: ["CMD", "curl", "localhost:8000/v2/health/ready"]
      timeout: 20s
      retries: 10
    shm_size: 2gb
    ulimits:
      memlock: -1
      stack: 67108864
    depends_on:
      - triton_conda_env

  ray_server:
    container_name: ${RAY_SERVER_HOST}
    image: ${RAY_SERVER_IMAGE}:${RAY_SERVER_VERSION}
    restart: unless-stopped
    environment:
      - RAY_ADDRESS=0.0.0.0:6379
      - RAY_REDIS_ADDRESS=redis:6379
    entrypoint: ["/bin/bash", "-c"]
    command: |
      'ray start --head --node-ip-address=0.0.0.0 --dashboard-host=0.0.0.0 --metrics-export-port ${RAY_SERVER_PROMETHEUS_PORT} --disable-usage-stats &&
      serve start --http-host=0.0.0.0 --grpc-port ${RAY_SERVER_SERVE_GRPC_PORT} --grpc-servicer-functions ray_pb2_grpc.add_RayServiceServicer_to_server &&
      tail -f /dev/null'
    volumes:
      - model_repository:/model-repository
    shm_size: 4gb
    ports:
      - ${RAY_SERVER_DASHBOARD_PORT}:${RAY_SERVER_DASHBOARD_PORT}

  temporal_admin_tools_model:
    container_name: temporal-admin-tools-model
    image: ${TEMPORAL_ADMIN_TOOLS_IMAGE}:${TEMPORAL_ADMIN_TOOLS_VERSION}
    restart: on-failure
    environment:
      TEMPORAL_CLI_ADDRESS: ${TEMPORAL_HOST}:${TEMPORAL_PORT}
    entrypoint: ["/bin/bash", "-c"]
    command: |
      'if [[ ! $(tctl --namespace model-backend namespace list | grep model-backend) ]]; then tctl --namespace model-backend namespace register; fi'
